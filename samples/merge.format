subprograms:

	procedure merge(int vecSize, matrix_of int [] vec) :

		int mid;
		%%ERROR%% int i, j, k;
		ref int tmp;

		%% tmp = (ref int) alloc(vecSize * sizeof(int)); %% NÃ£o validado! 
		%% gramatica: ref int alloc <assignment_P> tem que resolver!

		if (tmp != null):
			return 1;
		end_if;

		mid = vecSize / 2;
		%%ERROR%% i,k = 0;
		j = mid;
		
		while (i < mid && j < vecSize) :
			if (vec[i] <= vec[j]) :
				%%tmp[k] = vec[i++];
			else:
				%%tmp[k] = vec[j++];
			end_if;
	 		%%ERROR%% k++;
		end_while;

		if (i != mid) :
			while (j < vecSize) :
				%%ERROR%% tmp[k++] = vec[j++];
			end_while;
		else:
			while (i < mid) :
				%%ERROR%% tmp[k+1] = vec[i+1];
			end_while;
		end_if;

		for i in vec:
			%%ERROR%% vec[i] = tmp[i];
		end_for;

		free(tmp); %% sem correspondente na gramatica

	end_procedure;

	%%ERROR%% procedure mergeSort(int vecSize, matrix_of int [0..vecSize] vec) :
	procedure mergeSort(int vecSize, matrix_of int [0..2] vec) :
		int mid;

		if (vecSize > 1) :
			mid = vecSize / 2;
			mergeSort(vec, mid);
			mergeSort(vec + mid, vecSize - mid);
			merge(vec, vecSize);
		end_if;
	end_procedure;
